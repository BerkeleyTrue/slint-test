import { Button, VerticalBox } from "std-widgets.slint";


component MemoryTile inherits Rectangle {
    callback clicked;
    in property <bool> open_curtain;
    in property <bool> solved;
    in property <image> icon;

    width: 64px;
    height: 64px;
    background: solved ? #34CE57 : #3960D5;
    animate background { duration: 800ms; }

    border-radius: 4px;

    Image {
        source: icon;
        width: parent.width;
        height: parent.height;
    }

    // left curtain
    Rectangle {
        background: #193076;
        x: 0px;
        width: open_curtain ? 0px : (parent.width / 2);
        height: parent.height;
        border-top-left-radius: parent.border-radius;
        border-bottom-left-radius: parent.border-radius;
        animate width {
            duration: 250ms;
            easing: ease-in;
        }
    }

    Rectangle {
        background: #193076;
        x: open_curtain ? parent.width : (parent.width / 2);
        width: open_curtain ? 0px : (parent.width / 2);
        height: parent.height;
        border-top-right-radius: parent.border-radius;
        border-bottom-right-radius: parent.border-radius;

        animate width {
            duration: 250ms;
            easing: ease-in;
        }
        animate x {
            duration: 250ms;
            easing: ease-in;
        }
    }

    TouchArea {
        clicked => {
            root.clicked();
        }
    }
}

struct TileData {
  image: image,
  image_visible: bool,
  solved: bool,
  }

export component AppWindow inherits Window {
    width: 322px;
    height: 326px;

    callback check_if_pair_solved();
    in property <bool> disable_tiles;
    property <length> pads: 4px;
    property <length> space: 12px;

    in-out property <[TileData]> memory_tiles: [
        { image: @image-url("icons/at.png") },
        { image: @image-url("icons/balance-scale.png") },
        { image: @image-url("icons/bicycle.png") },
        { image: @image-url("icons/bus.png") },
        { image: @image-url("icons/cloud.png") },
        { image: @image-url("icons/cogs.png") },
        { image: @image-url("icons/motorcycle.png") },
        { image: @image-url("icons/video.png") },
    ];

    // for/if not supported in grid elements, lol...
    VerticalLayout {
        padding-top: root.pads;
        spacing: root.space;
        for row in 4: HorizontalLayout {
            padding-left: root.pads;
            padding-right: root.pads;
            spacing: root.space;
            for col in 4: MemoryTile {
                property <TileData> tile: memory_tiles[floor((row * 4) + col)];

                width: 64px;
                height: 64px;
                icon: tile.image;
                open_curtain: tile.image_visible || tile.solved;
                solved: tile.solved;
                clicked => {
                    if (!root.disable_tiles) {
                        tile.image_visible = !tile.image_visible;
                        root.check_if_pair_solved();
                    }
                }
            }
        }
    }

    // for tile[i] in memory_tiles: MemoryTile {
    //     x: mod(i, 4) * 74px + 12px;
    //     y: floor(i / 4) * 74px + 12px;
    //     width: 64px;
    //     height: 64px;
    //     icon: tile.image;
    //     open_curtain: tile.image_visible || tile.solved;
    //     solved: tile.solved;
    //     clicked => {
    //         if (!root.disable_tiles) {
    //             tile.image_visible = !tile.image_visible;
    //             root.check_if_pair_solved();
    //         }
    //     }
    // }
}
